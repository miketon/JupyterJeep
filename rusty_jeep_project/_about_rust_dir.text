VSCode artifact where rust functions failed to compile code completion :
- can be fixed by loading the project at each sibling folder
- as opposed to the monolithic parent rusty_jeep_project parent folder

@todo : Figure out if this is because Rust projects expect
- dir/sr/ folder for each project
- or if this is because of the way VSCode handles Rust projects

Got a chat-gpt answer :

***
I have a parent directory for all my Rust projects, how come in VScode when I load the parent directory my code completion feature no longer works and all my .rs source files are treated like text files, but when I load the project at each individual sibling folder itâ€™s all fine?
***

The issue you're experiencing is likely due to the way Visual Studio Code handles Rust projects and the Rust extension you're using, such as `rust-analyzer`. When you open a parent directory that contains multiple Rust projects, the Rust extension might not be activated correctly, causing code completion and other language features to stop working.

Here are a couple of options to address this issue:

1. **Use a multi-root workspace**: Visual Studio Code has a feature called [multi-root workspaces](https://code.visualstudio.com/docs/editor/multi-root-workspaces). You can create a workspace that includes multiple folders, and each folder can be treated as an individual Rust project. This way, the Rust extension should work correctly for each project within the workspace. To create a multi-root workspace, follow these steps:

   - Open Visual Studio Code and click on "File" > "Add Folder to Workspace."
   - Select the individual sibling folder you want to add to the workspace.
   - Repeat the above steps for each Rust project you want to include in the workspace.
   - To save the workspace configuration for future use, click on "File" > "Save Workspace As..." and give your workspace a name.

2. **Open individual projects in separate Visual Studio Code instances**: If you don't want to use a multi-root workspace, you can open each Rust project in a separate Visual Studio Code instance. This way, the Rust extension should be activated correctly for each project, and you'll have code completion and other language features working as expected.

Remember to have the Rust extension (such as `rust-analyzer`) installed and enabled in Visual Studio Code. You can find it by going to the Extensions view (`Ctrl+Shift+X` or `Cmd+Shift+X`), searching for "Rust", and clicking the "Install" button.

By following either of the above solutions, you should have code completion and other Rust language features working correctly for each of your projects.